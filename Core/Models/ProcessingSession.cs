using System;
using System.Collections.Generic;

namespace RevitDtools.Core.Models
{
    /// <summary>
    /// Represents a processing session for report generation
    /// </summary>
    public class ProcessingSession
    {
        public string SessionId { get; set; } = Guid.NewGuid().ToString();
        public DateTime StartTime { get; set; } = DateTime.Now;
        public DateTime? EndTime { get; set; }
        public string Command { get; set; }
        public string UserName { get; set; } = Environment.UserName;
        public string MachineName { get; set; } = Environment.MachineName;
        public List<ProcessingResult> Results { get; set; } = new List<ProcessingResult>();
        public Dictionary<string, object> Parameters { get; set; } = new Dictionary<string, object>();
        public List<string> ProcessedFiles { get; set; } = new List<string>();
        public bool Success { get; set; }
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Mark the session as completed
        /// </summary>
        public void Complete(bool success = true, string errorMessage = null)
        {
            EndTime = DateTime.Now;
            Success = success;
            ErrorMessage = errorMessage;
        }

        /// <summary>
        /// Get the total processing time
        /// </summary>
        public TimeSpan GetProcessingTime()
        {
            if (EndTime.HasValue)
            {
                return EndTime.Value - StartTime;
            }
            return DateTime.Now - StartTime;
        }

        /// <summary>
        /// Get summary statistics for the session
        /// </summary>
        public ProcessingSessionSummary GetSummary()
        {
            var summary = new ProcessingSessionSummary
            {
                SessionId = SessionId,
                Command = Command,
                StartTime = StartTime,
                EndTime = EndTime,
                ProcessingTime = GetProcessingTime(),
                Success = Success,
                ErrorMessage = ErrorMessage,
                FilesProcessed = ProcessedFiles.Count
            };

            foreach (var result in Results)
            {
                summary.TotalElementsProcessed += result.ElementsProcessed;
                summary.TotalElementsSkipped += result.ElementsSkipped;
                summary.TotalWarnings += result.Warnings.Count;
                summary.TotalErrors += result.Errors.Count;
            }

            return summary;
        }
    }

    /// <summary>
    /// Summary statistics for a processing session
    /// </summary>
    public class ProcessingSessionSummary
    {
        public string SessionId { get; set; }
        public string Command { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime? EndTime { get; set; }
        public TimeSpan ProcessingTime { get; set; }
        public bool Success { get; set; }
        public string ErrorMessage { get; set; }
        public int FilesProcessed { get; set; }
        public int TotalElementsProcessed { get; set; }
        public int TotalElementsSkipped { get; set; }
        public int TotalWarnings { get; set; }
        public int TotalErrors { get; set; }
    }

    /// <summary>
    /// Comprehensive processing report
    /// </summary>
    public class ProcessingReport
    {
        public ProcessingSessionSummary Summary { get; set; }
        public List<ProcessingResult> DetailedResults { get; set; } = new List<ProcessingResult>();
        public List<LogEntry> RelatedLogEntries { get; set; } = new List<LogEntry>();
        public DateTime GeneratedAt { get; set; } = DateTime.Now;
        public string GeneratedBy { get; set; } = Environment.UserName;

        /// <summary>
        /// Export the report as a formatted string
        /// </summary>
        public string ExportAsText()
        {
            var report = $"RevitDtools Processing Report\n";
            report += $"Generated: {GeneratedAt:yyyy-MM-dd HH:mm:ss}\n";
            report += $"Generated by: {GeneratedBy}\n";
            report += new string('=', 50) + "\n\n";

            report += $"Session Summary:\n";
            report += $"  Session ID: {Summary.SessionId}\n";
            report += $"  Command: {Summary.Command}\n";
            report += $"  Start Time: {Summary.StartTime:yyyy-MM-dd HH:mm:ss}\n";
            report += $"  End Time: {Summary.EndTime?.ToString("yyyy-MM-dd HH:mm:ss") ?? "In Progress"}\n";
            report += $"  Processing Time: {Summary.ProcessingTime}\n";
            report += $"  Success: {Summary.Success}\n";
            report += $"  Files Processed: {Summary.FilesProcessed}\n";
            report += $"  Elements Processed: {Summary.TotalElementsProcessed}\n";
            report += $"  Elements Skipped: {Summary.TotalElementsSkipped}\n";
            report += $"  Warnings: {Summary.TotalWarnings}\n";
            report += $"  Errors: {Summary.TotalErrors}\n\n";

            if (!string.IsNullOrEmpty(Summary.ErrorMessage))
            {
                report += $"Error Message: {Summary.ErrorMessage}\n\n";
            }

            if (DetailedResults.Count > 0)
            {
                report += "Detailed Results:\n";
                report += new string('-', 30) + "\n";
                foreach (var result in DetailedResults)
                {
                    report += $"  Context: {result.Context ?? "Unknown"}\n";
                    report += $"  Success: {result.Success}\n";
                    report += $"  Elements Processed: {result.ElementsProcessed}\n";
                    report += $"  Elements Skipped: {result.ElementsSkipped}\n";
                    report += $"  Processing Time: {result.ProcessingTime}\n";
                    if (!string.IsNullOrEmpty(result.Message))
                    {
                        report += $"  Message: {result.Message}\n";
                    }
                    if (result.Errors.Count > 0)
                    {
                        report += $"  Errors: {string.Join("; ", result.Errors)}\n";
                    }
                    report += "\n";
                }
            }

            return report;
        }
    }
}